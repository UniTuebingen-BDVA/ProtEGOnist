name: Build and Push Docker Image

on:
    workflow_dispatch:
    push:
        branches: [new-ci]

jobs:
    build:
        runs-on: ubuntu-latest
        outputs:
            browser_download_url: ${{ steps.create_release.outputs.browser_download_url }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: false
                  tags: protegonist
                  load: true # This is important, it will allow the image to be loaded to Docker environment

            - name: Save Docker image
              run: docker save protegonist | gzip > image_protegonist.tar.gz

            - name: Release Docker Image to Repo
              id: create_release
              uses: svenstaro/upload-release-action@v2
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: image_protegonist.tar.gz
                  asset_name: ProtEGOnist
                  tag: ${{ github.ref }}
                  overwrite: true
                  body: 'Image for the server deploy of ProtEGOnist.'
            - name: Run deploy script
              run: echo ${{ steps.create_release.outputs.browser_download_url }}
    deploy:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Install SSH client
              run: sudo apt-get install -qq -y openssh-client
            - name: Load and run Docker image on server
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_DEPLOY }}
                  SSH_CONFIG: ${{ secrets.CONFIG_SSH }}
                  SERVER_IP: ${{ secrets.SERVER_DEPLOY }}
                  UPDATE_RELEASE_CMD: ${{ secrets.UPDATE_RELEASE_CMD }}
                  DOWNLOAD_URL: ${{ needs.build.outputs.browser_download_url }}
              run: |
                  mkdir -p ~/.ssh && chmod 700 ~/.ssh
                  echo "$DOWNLOAD_URL"
                  echo "$SSH_CONFIG" > ~/.ssh/config
                  echo "$SSH_PRIVATE_KEY" > ~/.ssh/github-actions
                  chmod 600 ~/.ssh/config
                  chmod 600 ~/.ssh/github-actions
                  ssh -F ~/.ssh/config $SERVER_IP $UPDATE_RELEASE_CMD $DOWNLOAD_URL
